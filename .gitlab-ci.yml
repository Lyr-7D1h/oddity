services:
  - postgres:latest

variables:
  POSTGRES_DB: testing
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test_pass
  PGPASSWORD: test_pass

stages:
  - connect
  - build
  - test
  - staging
  - production

connect:
  image: postgres
  script:
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=test_pass
    - psql -h "postgres" -U "test" -d "testing" -c "SELECT 'OK' AS status;"

build:
  image: node:latest
  stage: build
  artifacts:
    untracked: true
  before_script:
    - cd ./client && npm ci
    - cd ../server && npm ci
  script:
    - cd ../client && npm run build

test:
  image: node:latest
  stage: test
  dependencies:
    - build
  script:
    - cd ./client && npm test
    - echo $POSTGRES_PASSWORD
    - cd ../server && DB_HOST=postgres DB_PASS=$POSTGRES_PASSWORD npm test

staging:
  image: docker:latest
  stage: staging
  services:
    - docker:dind
  before_script:
    - docker info
    - docker login -u $CI_DOCKER_USERNAME -p $CI_DOCKER_PASS
  script:
    - docker build -t $CI_DOCKER_USERNAME/oddity:staging .
    - docker push $CI_DOCKER_USERNAME/oddity:staging

production:
  image: docker:latest
  stage: production
  services:
    - docker:dind
  when: manual
  before_script:
    - docker info
    - docker login -u $CI_DOCKER_USERNAME -p $CI_DOCKER_PASS
  script:
    - docker build -t $CI_DOCKER_USERNAME/oddity:production .
    - docker push $CI_DOCKER_USERNAME/oddity:production

# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# After tests it will push to DockerHub

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    container: cypress/base:13.6.0

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: ["12.x", "10.x"]

    env:
      DB_HOST: postgres
      DB_NAME: testing
      DB_USERNAME: test
      DB_PASSWORD: test_pass
      SESSION_SECRET: kn&6Ji5#dKtF!z#*rH@u48hm22NEz&bdFJ&JzwhYVF
      SENTRY_DSN: https://ac8fa8071ed5482c8d559a8acb51f8fc@sentry.io/1886726
      CAPTCHA_CLIENT: "asdfasdfasdfasdf"
      CAPTCHA_SERVER: "asdfasdfasdfasdf"

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build Server
        run: |
          npm ci
          node module_loader
          node models_sync
        working-directory: server
      - name: Load Modules
        run: ln -fs "$(pwd)/server/node_modules" "$(pwd)/modules/"
      - name: Build Client
        working-directory: client
        run: |
          npm ci
          npm run build
      - name: Test Server
        run: npm test
        working-directory: server
      - name: Test Client
        run: npm test
        working-directory: client

  docker:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1
      - name: Setting Image Name
        run: |
          IMAGE_NAME=oddity:$(date +%s)
          echo $IMAGE_NAME
      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin
      - name: Install Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: Build and push
        run: |
          docker buildx build --push \
            --tag oddityservers/oddity:${GITHUB_SHA::8} \
            --tag oddityservers/oddity:latest \
            --platform linux/amd64,linux/arm64 .
